# Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()),
# умножение (__mul__()), деление (__truediv__()). Данные методы должны применяться только к клеткам и выполнять увеличение,
# уменьшение, умножение и целочисленное (с округлением до целого) деление клеток, соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создаётся общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
# Деление. Создаётся общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
#
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернёт строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернёт строку: *****\n*****\n*****.
# Подсказка: подробный список операторов для перегрузки доступен по ссылк
from typing import Any


class Cell():
    def __init__(self, cells_number):
        self.cells_number = round(cells_number)

    def __add__(self, other):
       return round(self.cells_number + other.cells_number)

    def __sub__(self, other):
       if self.cells_number - other.cells_number > 0:
           return round(self.cells_number - other.cells_number)
       else:
           return 'Разность количества ячеек двух клеток меньше нуля!'

    def __mul__(self, other):
       return round(self.cells_number * other.cells_number)

    def __truediv__(self, other):
        return round(self.cells_number / other.cells_number)

    def make_order(self, cells_in_row):
        a = self.cells_number // cells_in_row
        b = self.cells_number % cells_in_row
        return '\n'.join(['*' * cells_in_row for _ in range(a)]) + '\n' + '*' * b

my_cell = Cell(45)
new_cell = Cell(28)

print(my_cell + new_cell)
print(new_cell - my_cell)
print(my_cell * new_cell)
print(my_cell / new_cell)
print(my_cell.make_order(8))